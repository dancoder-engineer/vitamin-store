{"ast":null,"code":"var _jsxFileName = \"/home/dan/code/projects/project4/frontend/src/checkout/Cart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport CartItem from './CartItem.js';\nimport GooglePayButton from '@google-pay/button-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Cart() {\n  _s();\n\n  let [cartItems, setCartItems] = useState([]);\n  let [subtotal, setSubtotal] = useState(0.00);\n  let [grandTotal, setGrandTotal] = useState(0.00);\n  let [paymentInfo, setPaymentInfo] = useState({});\n  let [user, setUser] = useState({});\n  let salesTax = .085;\n  let userId = 0;\n  useEffect(() => setGrandTotal((subtotal * (salesTax + 1)).toFixed(2)), [subtotal]);\n  useEffect(() => {\n    completeOrder(paymentInfo);\n  }, [paymentInfo]);\n  useEffect(() => {\n    grabCart();\n    youGetMe();\n  }, []);\n\n  function youGetMe() {\n    fetch(\"/getme/\").then(res => res.json()).then(data => {\n      //  console.log(data)\n      if (data) {\n        setUser(data);\n      }\n    });\n  }\n\n  function completeOrder(paymentData) {\n    let submitIt = {\n      user_id: user.id,\n      fulfilled: \"Ordered\",\n      fulfilled_by: 0\n    };\n    console.log(paymentData);\n    let fullurl = \"/orders/\";\n    fetch(fullurl, {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      method: \"POST\",\n      body: JSON.stringify(submitIt)\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n    });\n  }\n\n  function grabCart() {\n    fetch('/getcart/').then(res => res.json()).then(data => {\n      makeGrandTotal(data);\n      makeItems(data);\n    });\n  }\n\n  let gpButton = /*#__PURE__*/_jsxDEV(GooglePayButton, {\n    className: \"centered\",\n    environment: \"TEST\" //TEST or PRODUCTION\n    ,\n    paymentRequest: {\n      apiVersion: 2,\n      apiVersionMinor: 0,\n      allowedPaymentMethods: [{\n        type: \"CARD\",\n        parameters: {\n          allowedAuthMethods: [\"PAN_ONLY\", \"CRYPTOGRAM_3DS\"],\n          allowedCardNetworks: [\"MASTERCARD\", \"VISA\"]\n        },\n        tokenizationSpecification: {\n          type: \"PAYMENT_GATEWAY\",\n          parameters: {\n            gateway: \"example\",\n            GatewayMerchantId: \"example\"\n          }\n        }\n      }],\n      merchantInfo: {\n        merchantId: \"12345678\",\n        merchantName: \"Demo Merchant\"\n      },\n      transactionInfo: {\n        totalPriceStatus: \"FINAL\",\n        totalPriceLabel: \"Total\",\n        totalPrice: grandTotal.toString(),\n        currencyCode: \"USD\",\n        countryCode: \"US\"\n      },\n      shippingAddressRequired: true,\n      callbackIntents: [\"PAYMENT_AUTHORIZATION\"]\n    },\n    onLoadPaymentData: paymentRequest => paymentRequest,\n    onPaymentAuthorized: paymentData => {\n      setPaymentInfo(paymentData);\n      return {\n        transactionState: \"SUCCESS\"\n      };\n    },\n    existingPaymentMethodRequired: \"false\",\n    buttonColor: \"Black\",\n    buttonType: \"Buy\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n\n  function makeGrandTotal(cartData) {\n    let total = 0.00;\n    let iterations = 0;\n\n    for (let i of Object.keys(cartData)) {\n      let url = '/items/' + i;\n      fetch(url).then(res => res.json()).then(data => {\n        iterations += 1;\n        let subPrice = data.price * cartData[i];\n        total = subPrice + total;\n\n        if (iterations === Object.keys(cartData).length) {\n          setSubtotal(total.toFixed(2));\n        }\n      });\n    }\n  }\n\n  function makeItems(cartData) {\n    if (cartData) {\n      setCartItems(Object.keys(cartData).map(i => /*#__PURE__*/_jsxDEV(CartItem, {\n        item: i,\n        amount: cartData[i],\n        redoItems: redoItems\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 57\n      }, this)));\n    }\n  }\n\n  function redoItems() {\n    setCartItems([]);\n    grabCart();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"middleText\",\n      children: \"Cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this), cartItems, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gpButton\",\n      children: [\"Subtotal: $\", subtotal, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 38\n      }, this), \"Sales Tax: \", salesTax * 100, \"%\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 45\n      }, this), \"Total: $\", grandTotal, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 37\n      }, this), gpButton]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Cart, \"WvqfVziuX85pzw2uBHyG9kdnw+A=\");\n\n_c = Cart;\nexport default Cart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"names":["React","useState","useEffect","CartItem","GooglePayButton","Cart","cartItems","setCartItems","subtotal","setSubtotal","grandTotal","setGrandTotal","paymentInfo","setPaymentInfo","user","setUser","salesTax","userId","toFixed","completeOrder","grabCart","youGetMe","fetch","then","res","json","data","paymentData","submitIt","user_id","id","fulfilled","fulfilled_by","console","log","fullurl","headers","method","body","JSON","stringify","makeGrandTotal","makeItems","gpButton","apiVersion","apiVersionMinor","allowedPaymentMethods","type","parameters","allowedAuthMethods","allowedCardNetworks","tokenizationSpecification","gateway","GatewayMerchantId","merchantInfo","merchantId","merchantName","transactionInfo","totalPriceStatus","totalPriceLabel","totalPrice","toString","currencyCode","countryCode","shippingAddressRequired","callbackIntents","paymentRequest","transactionState","cartData","total","iterations","i","Object","keys","url","subPrice","price","length","map","redoItems"],"sources":["/home/dan/code/projects/project4/frontend/src/checkout/Cart.js"],"sourcesContent":["import React, {useState, useEffect} from 'react'\nimport CartItem from './CartItem.js'\n\nimport GooglePayButton from '@google-pay/button-react'\n\nfunction Cart() {\n\n    let [cartItems, setCartItems] = useState([])\n    let [subtotal, setSubtotal] = useState(0.00)\n    let [grandTotal, setGrandTotal] = useState(0.00)\n    let [paymentInfo, setPaymentInfo] = useState({})\n    let [user, setUser] = useState({})\n\n    let salesTax = .085\n    let userId = 0\n\n\n    useEffect(() => setGrandTotal((subtotal * (salesTax + 1)).toFixed(2)), [subtotal])\n   \n    useEffect(() => \n       {completeOrder(paymentInfo)}, [paymentInfo] )\n\n    useEffect(()  => { \n    grabCart()\n    youGetMe()\n\n\n}, [])\n\nfunction youGetMe() {\n\n    fetch(\"/getme/\")\n    .then(res => res.json())\n    .then(data => {//  console.log(data)\n      if(data) { setUser(data) }\n    })\n  }\n\n    function completeOrder(paymentData) {\n\n        let submitIt = {\n            user_id: user.id,\n            fulfilled: \"Ordered\",\n            fulfilled_by: 0\n        }\n\n\n        console.log(paymentData)\n        let fullurl = \"/orders/\"\n        fetch(fullurl, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            method: \"POST\",\n            body: JSON.stringify(submitIt)\n        })\n        .then(res => res.json())\n        .then(data => {\n          console.log(data)\n            })\n    }\n\n    function grabCart() {\n        fetch('/getcart/')\n        .then(res => res.json())\n        .then((data) => {\n            makeGrandTotal(data)\n            makeItems(data)\n            \n        })\n    }\n\n    let gpButton = (\n                \n        <GooglePayButton\n        className=\"centered\"\n            environment=\"TEST\"\t\t\t//TEST or PRODUCTION\n            paymentRequest={{\n                apiVersion:2,\n                apiVersionMinor:0,\n                allowedPaymentMethods:[\n                    {\n                        type:\"CARD\",\n                        parameters: {\n                            allowedAuthMethods:[\"PAN_ONLY\", \"CRYPTOGRAM_3DS\"],\n                            allowedCardNetworks:[\"MASTERCARD\", \"VISA\"]\n                        },\n\n                        tokenizationSpecification:{\n                            type:\"PAYMENT_GATEWAY\",\n                            parameters:{\n                                gateway:\"example\",\n                                GatewayMerchantId:\"example\"\n                            }\n                        }\n                    }\n                ],\n                    \n                            merchantInfo:{\n                                merchantId:\"12345678\",\n                                merchantName:\"Demo Merchant\"\n                            },\n\n                            transactionInfo:{\n                                totalPriceStatus:\"FINAL\",\n                                totalPriceLabel:\"Total\",\n                                totalPrice:grandTotal.toString(),\n                                currencyCode:\"USD\",\n                                countryCode:\"US\"\n                            },\n                            shippingAddressRequired:true,\n                            callbackIntents:[\"PAYMENT_AUTHORIZATION\"]\n                        }}\n\n                        onLoadPaymentData={paymentRequest => paymentRequest }\n                        onPaymentAuthorized={paymentData => {\n                            setPaymentInfo(paymentData)\n                            return { transactionState: \"SUCCESS\" }\n                        }}\n                        existingPaymentMethodRequired=\"false\"\n                        buttonColor=\"Black\"\n                        buttonType=\"Buy\"\n\n            >\n                </GooglePayButton>\n            )\n\n\n\n            function makeGrandTotal(cartData) {\n                let total = 0.00\n                let iterations = 0\n                for (let i of Object.keys(cartData)) {\n                    let url = '/items/' + i\n                    fetch(url)\n                    .then(res => res.json())\n                    .then(data => { \n                        iterations += 1\n                        let subPrice = data.price * cartData[i]\n                        total = subPrice + total\n                        if (iterations === Object.keys(cartData).length)    { setSubtotal(total.toFixed(2)) }\n                    })\n                }\n            }\n\n\n\n\n    function makeItems(cartData) {\n        \n        if (cartData) { \n           setCartItems (Object.keys(cartData).map(i => <CartItem item={i} amount={cartData[i]} redoItems={redoItems}  key={i} />) )\n        }\n    }\n\n    function redoItems() {\n        setCartItems([])\n        grabCart()\n    }\n\n\n\n    return(\n        <div>\n            <h1 className='middleText'>Cart</h1>\n            {cartItems}\n            <br />\n            <div className='gpButton'>\n                Subtotal: ${subtotal}<br />\n                Sales Tax: {salesTax * 100}%<br />\n                Total: ${grandTotal}<br />\n                {gpButton}\n            </div>\n\n\n        </div>\n    )\n}\n\nexport default Cart"],"mappings":"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"},"metadata":{},"sourceType":"module"}